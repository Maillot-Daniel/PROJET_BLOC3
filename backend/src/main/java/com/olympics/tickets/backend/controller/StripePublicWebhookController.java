package com.olympics.tickets.backend.controller;

import com.olympics.tickets.backend.service.TicketService;
import com.stripe.exception.SignatureVerificationException;
import com.stripe.model.Event;
import com.stripe.model.checkout.Session;
import com.stripe.net.Webhook;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import jakarta.servlet.http.HttpServletRequest;

@RestController
@RequestMapping("/public")
@RequiredArgsConstructor
@Slf4j
public class StripePublicWebhookController {

    private final TicketService ticketService;
    private final Environment env;

    @PostMapping("/stripe-webhook")
    public ResponseEntity<String> handlePublicWebhook(
            @RequestBody String payload,
            @RequestHeader("Stripe-Signature") String sigHeader,
            HttpServletRequest request) {

        log.info("üéØ PUBLIC WEBHOOK APPELE - M√©thode: {}, URI: {}",
                request.getMethod(), request.getRequestURI());
        log.info("üì® Stripe-Signature: {}", sigHeader != null ? "PR√âSENT" : "ABSENT");
        log.info("üì¶ Payload re√ßu ({} caract√®res)", payload.length());

        String endpointSecret = env.getProperty("STRIPE_WEBHOOK_SECRET");

        if (endpointSecret == null || endpointSecret.isEmpty()) {
            log.error("‚ùå STRIPE_WEBHOOK_SECRET NON CONFIGUR√âE");
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Configuration webhook manquante");
        }

        log.info("‚úÖ Webhook secret trouv√© ({} caract√®res)", endpointSecret.length());

        try {
            Event stripeEvent = Webhook.constructEvent(payload, sigHeader, endpointSecret);
            log.info("‚úÖ √âv√©nement Stripe valid√©: {}", stripeEvent.getType());

            if ("checkout.session.completed".equals(stripeEvent.getType())) {
                Session session = (Session) stripeEvent.getDataObjectDeserializer()
                        .getObject()
                        .orElse(null);

                if (session != null) {
                    log.info("üí∞ Session pay√©e: {} - Montant: {} - Email: {}",
                            session.getId(), session.getAmountTotal(), session.getCustomerEmail());

                    ticketService.processSuccessfulPayment(session);
                    log.info("‚úÖ Paiement trait√© avec succ√®s pour: {}", session.getId());
                }
            }

            return ResponseEntity.ok("‚úÖ Webhook public trait√© avec succ√®s");

        } catch (SignatureVerificationException e) {
            log.error("‚ùå Signature webhook invalide: {}", e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Signature invalide");
        } catch (Exception e) {
            log.error("‚ùå Erreur lors du traitement du webhook: {}", e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                    .body("Erreur de traitement: " + e.getMessage());
        }
    }
}