# application-docker.properties - Configuration spécifique pour Docker

# ============ DATABASE CONFIGURATION ============
# Utilise le service Docker 'db' au lieu de localhost
spring.datasource.url=jdbc:mysql://db:3306/olympics_tickets?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=

# ============ JPA/HIBERNATE CONFIGURATION ============
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# ============ SERVER CONFIGURATION ============
server.port=8080

# ============ FRONTEND URLs (Docker internal network) ============
# Utilise le nom du service Docker 'frontend'
frontend.base.url=http://frontend:80
frontend.success-url=http://frontend:80/success
frontend.cancel-url=http://frontend:80/cancel

# ============ STRIPE CONFIGURATION ============
# La clé sera injectée via les variables d'environnement Docker
stripe.secret-key=${STRIPE_SECRET_KEY}

# ============ EMAIL CONFIGURATION ============
# (identique à votre configuration dev)
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=ton-email@gmail.com
spring.mail.password=ton-mot-de-passe
spring.mail.protocol=smtp
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=5000
spring.mail.properties.mail.smtp.writetimeout=5000

# ============ THYMELEAF CONFIGURATION ============
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML

# ============ LOGGING CONFIGURATION ============
logging.level.root=INFO
logging.level.org.springframework=INFO
logging.level.com.olympics=DEBUG